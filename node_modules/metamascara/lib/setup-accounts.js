const EventEmitter = require('events')
const createRandomId = require('json-rpc-random-id')()

module.exports = function (provider) {
  setupAccounts(provider)
  if (!provider.accounts) {
    provider.accounts = new EventEmitter()
  } else {
    provider._events = new EventEmitter()
    provider.accounts.emit = provider._events.emit.bind(provider._events)
    provider.accounts.on = provider._events.on.bind(provider._events)
  }
}

async function setupAccounts (provider) {

  try {
    let accounts = await getAccounts(provider)
    let selectedAddress = accounts[0]
    provider.accounts.selectedAddress = accounts[0]
    if (provider.publicConfigStore) {
      provider.publicConfigStore.subscribe(function (state) {
        if (state.selectedAddress !== selectedAddress) {
          selectedAddress = state.selectedAddress
          provider.accounts.selectedAddress = selectedAddress
          provider.accounts.emit('account:changed', selectedAddress)
        }
      })
    } else {
      setInterval(async () => {
        accounts = await getAccounts(provider)
        console.log(accounts)
        if (accounts[0] === selectedAddress) {
          selectedAddress = accounts[0]
          provider.accounts.selectedAddress = selectedAddress
          provider.accounts.emit('account:changed', selectedAddress)
        }
      }, 1000)
    }
  } catch (e) {
    console.error(e)
  }
}

function getAccounts (provider) {
  return new Promise((resolve, reject) => provider.sendAsync({
    method: 'eth_accounts',
    id: createRandomId(),
    jsonrpc: '2.0',
    params: [],
  }, (err, response) => err ? reject(err) : resolve(response.result)))
}